#include <iostream>
using namespace std;

void updateQueue(int queue[], int arrival[], int n, int &maxProcessIndex, int timer) {
    for (int i = 0; i < n; i++) {
        if (queue[i] == 0) {
            queue[i] = maxProcessIndex + 1;
            break;
        }
    }
}

void maintainQueue(int queue[], int n) {
    for (int i = 0; i < n - 1 && queue[i + 1] != 0; i++)
        swap(queue[i], queue[i + 1]);
}

void checkNewArrival(int timer, int arrival[], int n, int &maxProcessIndex, int queue[]) {
    bool newArrival = false;
    for (int j = maxProcessIndex + 1; j < n; j++) {
        if (arrival[j] <= timer) {
            maxProcessIndex = j;
            newArrival = true;
        }
    }
    if (newArrival) updateQueue(queue, arrival, n, maxProcessIndex, timer);
}

int main() {
    int n, tq, timer = 0, maxProcessIndex = 0;
    float avgWait = 0, avgTT = 0;
    
    cout << "Enter time quanta and number of processes: ";
    cin >> tq >> n;
    
    int arrival[n], burst[n], wait[n], turn[n], queue[n] = {0}, temp_burst[n];
    bool complete[n] = {false};

    cout << "Enter arrival and burst times: ";
    for (int i = 0; i < n; i++) cin >> arrival[i] >> burst[i], temp_burst[i] = burst[i];

    while (timer < arrival[0]) timer++;
    queue[0] = 1;
    
    while (true) {
        bool allComplete = true;
        for (int i = 0; i < n; i++) if (temp_burst[i] != 0) allComplete = false;
        if (allComplete) break;

        for (int i = 0; i < n && queue[i] != 0; i++) {
            int ctr = 0;
            while (ctr < tq && temp_burst[queue[0] - 1] > 0) {
                temp_burst[queue[0] - 1]--;
                timer++;
                ctr++;
                checkNewArrival(timer, arrival, n, maxProcessIndex, queue);
            }
            if (temp_burst[queue[0] - 1] == 0 && !complete[queue[0] - 1]) {
                turn[queue[0] - 1] = timer;
                complete[queue[0] - 1] = true;
            }
            bool idle = (queue[n - 1] == 0);
            for (int i = 0; i < n && queue[i] != 0 && idle; i++)
                if (!complete[queue[i] - 1]) idle = false;
            
            if (idle) {
                timer++;
                checkNewArrival(timer, arrival, n, maxProcessIndex, queue);
            }
            maintainQueue(queue, n);
        }
    }

    for (int i = 0; i < n; i++) {
        turn[i] -= arrival[i];
        wait[i] = turn[i] - burst[i];
    }

    cout << "\nProcess\tArrival\tBurst\tWait\tTurnaround\n";
    for (int i = 0; i < n; i++) {
        cout << i + 1 << "\t" << arrival[i] << "\t" << burst[i] << "\t" << wait[i] << "\t" << turn[i] << endl;
        avgWait += wait[i];
        avgTT += turn[i];
    }

    cout << "\nAverage wait time: " << avgWait / n << "\nAverage turnaround time: " << avgTT / n;
    return 0;
}