#include <bits/stdc++.h> 
using namespace std;

struct Process {
    int pid, arrival, burst, start, completion, turnaround, waiting;
};

int main() {
    int n;
    cout << "Enter number of processes: ";
    cin >> n;
    
    Process p[n];
    int burst_remaining[n] = {0}, is_completed[n] = {0};
    int total_turnaround = 0, total_waiting = 0;
    
    for (int i = 0; i < n; i++) {
        cout << "Enter arrival and burst time of process " << i+1 << ": ";
        cin >> p[i].arrival >> p[i].burst;
        p[i].pid = i + 1;
        burst_remaining[i] = p[i].burst;
    }

    int current_time = 0, completed = 0;
    while (completed != n) {
        int idx = -1, min_burst = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= current_time && !is_completed[i] && burst_remaining[i] < min_burst) {
                min_burst = burst_remaining[i];
                idx = i;
            }
        }

        if (idx != -1) {
            if (burst_remaining[idx] == p[idx].burst) p[idx].start = current_time;
            burst_remaining[idx]--;
            current_time++;
            
            if (burst_remaining[idx] == 0) {
                p[idx].completion = current_time;
                p[idx].turnaround = p[idx].completion - p[idx].arrival;
                p[idx].waiting = p[idx].turnaround - p[idx].burst;
                
                total_turnaround += p[idx].turnaround;
                total_waiting += p[idx].waiting;
                
                is_completed[idx] = 1;
                completed++;
            }
        } else {
            current_time++;
        }
    }

    cout << "\nPID\tArrival\tBurst\tStart\tComplete\tTAT\tWait\n";
    for (int i = 0; i < n; i++) {
        cout << p[i].pid << "\t" << p[i].arrival << "\t" << p[i].burst << "\t" 
             << p[i].start << "\t" << p[i].completion << "\t\t" << p[i].turnaround 
             << "\t" << p[i].waiting << "\n";
    }
    
    cout << fixed << setprecision(2);
    cout << "\nAverage Turnaround Time = " << (float)total_turnaround / n;
    cout << "\nAverage Waiting Time = " << (float)total_waiting / n;

    return 0;
}